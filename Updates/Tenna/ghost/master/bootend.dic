//---------------------------Booting and Ending--------------------------

//This .dic file is set aside for booting and ending dialogue, as well as a few other functions. Make sure to read the walkthrough (http://www.ashido.com/ukagaka/walkthrough.html), in particular the page about SakuraScript, for more details about how to properly format ghost dialogue!
//You should be editing these in Notepad++, and in particular, you should set the Language to C to properly highlight all the text. It will make things A LOT EASIER for you, trust me! It will also help you keep track of your brackets in case you forget some. If you click on a line with a bracket in Notepad++, it should highlight where the other bracket ends, or turn purple if there's no finishing bracket (which you should definitely fix!)
//It will also highlight my commented lines in green, so you'll know where they are. Any line beginning with // is a commented line that the code will not read. It's just for your reference!

//If you see a big block of commented text you want to uncomment, highlight the text and then hit ctrl-shift-k in Notepad++ and that should uncomment it. Mostly this is intended for advanced users.

//Much of this file you will only have to set up once, so take heart!

/* This file has...

OnFirstBoot
NameInput (optional)
First pronoun stuff (optional)
GetDaySlot/GetTimeSlot
OnBoot
normalboottalk
OnClose
OnWindowStateRestore
OnGhostChanging
OnGhostChanged
OnShellChanging
OnShellChanged
OnDressupChanged
*/


//*********************Advanced User Info*******************************
//These text boxes are meant for those who have an interest in expanding or using more complicated functions in their ghost. Also for my own reference in the future since I plan on using this template too, haha. If you have no interest in any of this and just want to keep things as simple as possible, feel free to skip these boxes.

//--A Note about Functions--
//A function that begins with On, such as OnFirstBoot here, can be called from anywhere in any .dic file by using \![raise] or by just sticking OnFunction somewhere. A function that does NOT start with On, however, can be a bit finicky. You can create your own functions all over the place if you want, there's just a difference between OnDoodlebop and Doodlebop, if you get me. See the walkthrough page about coding for more about creating functions.

//If you're having trouble getting a function of yours to run, like Doodlebop, try changing it to OnDoodlebop and see if that fixes it.
//***********************************************************************


//--OnFirstBoot--

//OnFirstBoot is, as you can probably guess, what happens when your user first boots up your ghost. This will only run the first time they are booted!

//*********************Advanced User Info*******************************
//Because this only runs once and under an odd set of circumstances, it can be hard to test if this function is working properly. Trying to run the entire function using \![raise,OnFirstBoot] will instead bring up your alternate dialogue, so sadly you can't check it that way. You CAN get it to run using \![raise,OnFirstBoot,0] though.

//If you're going to be adding new variables and values and such, make sure you define them all in OnFirstBoot! You can make any value you want, but it has to equal SOMEthing to exist at first. Then you can do whatever with it.
//***********************************************************************


OnFirstBoot : all
{
//OnFirstBoot begins with some code at first to define some values your ghost will be using. I'll briefly touch on what they are, but for the most part you should not need to edit any of these and you can safely ignore most of them (except nowshell if you've changed your shell folder's name from master). Definitely don't delete them unless you know what you're doing.

 	lastTalk = "" //This is part of how chained conversations work (see aitalk.dic).
	passhour = 0
	passmin = 0 
	passsec = 0 // These keep track of the time.
 	username         = "GUY" //This sets a temporary name for the user. It'll be replaced when they tell the ghost their name.
	stroke           = 0	// Sets their being-pet state to zero.
 	teachusername    = 0	// Related to them learning your name.
	mikireflag       = 0	// Determines behavior at certain points.
 	aitalkinterval = 300 //Their default talk rate.
 	birthdayprint = "????" //A temporary value for the user's birthday.
	talktime = "5 minutes" //How the value aitalkinterval will display in the config menu.
	deleteshitai = "ON" //Sets whether or not the user can uninstall the ghost to "OFF". The user can change it later in the config menu (see menu.dic). 
	nowshell = "master" //This is for a special if check in aitalk.dic to see what shell the ghost is using. You should use the name of your default shell folder here.
	//firstboot = 1 //This marks that this is the first time you've run the ghost. It's so it won't reroute to general name changing dialogue when the user inputs their name. Uncomment this if you're going to have your ghost ask the user directly when they're first booted for the user's name.
	notatv = 0
	namefirst = 1
	tvwatch = 0
	tvtogether = 0
	timecheck = 1
	mailcheck = 0
	watchtennafirsttime = 0
	watchtogetherwithtenna = 0
	watchingvideos = 0
	watchingmovies = 0
	watchingmusic = 0
	watchingart = 0
	watchingwriting = 0
	watchinghomework = 0
	watchinggaems = 0
	watchingstuff = 0
	watchingch1 = 0
	watchingch2 = 0
	watchingch3 = 0
	ilytv = 0
	
	if reference0 == 0 //Don't touch this line.
 	{
		//---- Alright, here is where the dialogue for your ghost begins! Again, I hope you've studied up on the walkthrough's guide to dialogue coding! However, there are a few unique things about this first conversation that you should keep in mind.
		//Make sure to set up poses for both characters right when you start, otherwise one will be invisible until they speak.
		//Always make sure to keep your dialogue in the quotation marks! And remember, you can't use quotation marks IN dialogue either. You can use two single apostrophes instead if you must.
		//Note also the use of the \x and \c tags. Read more about them in the intermediate SakuraScript section of the walkthrough if you're curious.
		
		"\![enter,passivemode]\0\s[10].\w5.\w5.\w5.\w5.\w5.\w5.\w8\w8\n\n[half]*(It's an old TV. \w8\w8Seems like it's still working. \w8\w8Turn it on?)\w8\w8\w2\n\n[half]\_q\![*]\q[Yes,openact]   \![*]\q[No,closeact]"
		
		//"\1\s[10]\0\s[0]Hello, and welcome to the Girl and Triangle Ghost Template. \w5My name is Girl, and that's Triangle over there.\w8\1\s[10]Sup. \w8\0\s[0]\n\n[half]If you downloaded this template, you are presumably interested in making a ghost. \w5This template has been designed to help you do that. \w5Please make sure to carefully read the included readme file. \w8\1\n\n[half]\s[10]Each of the .dic files you'll be editing has a lot of commentary to guide you.\w8\0\s[0]\n\n[half]In the future, you will be replacing this dialogue with the dialogue for your own ghost. \w5This is a good place to introduce your characters.\w8\1\n\n[half]\s[10]You can have your characters banter with each other and explain how the ghost works and how to access menus.\x\c\0\s[0]More details about dialogue coding will be in the walkthrough page.\w8\1\c\s[10]You can direct the user to the config menu to set their name and pronouns by hand, or you can add the questions directly in this first boot sequence if you want. Good luck with your future ghost!\e"
		
		
		//*********************Advanced User Info*******************************
		
		//If you want to directly add the option for the user to give their name and pronouns, you can uncomment and add this text below to the above. You don't have to do this if you don't want to!
	
		// "Now we're going to ask the user the first question about themselves, namely what pronouns they want us to use.\w8\0\s[0]\n\n[half]This will let us construct grammatically correct sentences referring to the user later.\x\w8\1\c\s[10]How should we refer to you, user?\n\n[half]"
		// "\w5\_q\![*]\q[He/Him/His,choicefirsthehim]\n"
		// "\![*]\q[She/Her/Hers,choicefirstsheher]\n"
		// "\![*]\q[They/Them/Their,choicefirsttheythem]\e"
		
		//If you do include this, see the "Name/Pronouns" section below.
		
		//You can rename the choices at the bottom of that pronoun menu question anything you like. The basic structure of a choice goes like \q[Displayed Name,Linkedfunction]. So for example, \q[Do a Dance,danceitup] would display "Do a Dance" in the balloon and it would link to the function titled "danceitup".
		//Note - Do not include quotation marks in the displayed name, or any other symbols like brackets or dialogue coding like \_a, since that'll break the option in the balloon. If you do this you'll notice pretty quickly. Also option names do not word wrap, so don't make them too long if your balloon is small.
		
		//If you remember my note from above about the difference between On functions, this is one place it comes up. If your linked function in this menu doesn't start with On, like danceitup up there, you'll have to preface it in the following code with Select.danceitup. You can see this at work below here. However, if it does have On, such as OnDanceitup, then you can simply name the function in the code as OnDanceitup. Take a look whenever functions are defined and how they're called in the files,and it should come together for you.
		
		//If you link to a function that doesn't exist, the ghost will do nothing. This can be handy for "Cancel" type functions, just point it at something that doesn't exist if you don't want to have a specific bit of cancel dialogue.
		//***********************************************************************
 	}
	else
 	{
		//---- This is dialogue for when the user uninstalls the ghost for whatever reason, then reinstalls them again. They will run this dialogue instead of their normal dialogue above. You can change this to reflect the fact the user's uninstalled your ghost once, or you can make it the same as the above, it's up to you. You'll see this if you try to run OnFirstBoot using ![raise] without the extra 0 as mentioned above.
 		{
 		"\![enter,passivemode]\0\s[29].\w5.\w5.\w5.\w5.\w5.\w5.\w8\w8\n\n[half]*(It's an old, oddly familiar TV. \w8\w8Seems like it's still working. \w8\w8Turn it on?)\w8\w8\w2\n\n[half]\_q\![*]\q[Yes,openact]   \![*]\q[No,closeact]"
		}
 	}
}

Select.openact
{
	notatv = 1
	"\0\s[29]*(You turn the dial on.)\n\n[half]\w8\w8\w6\s[6]\w8*What do we have here, \w5folks? \w8\w1\s[12]A brand new set for a brand new show?! \w8\w1\s[13]\i[1]I am your humble host,\w2\s[0] \f[color,254,0,0]Mr.\f[color,0,146,246]Ant \f[color,255,255,2]Tenna\f[color,default]! \w8\w1And \w4\s[11]\f[bold,true]\f[color,255,255,2]\nYOU\w4\f[color,default]\f[bold,false] must be a \w4\f[bold,true]\f[color,255,255,2]STAR\f[color,default]\f[bold,false] that picked me up from the street and brought me to my lovely new home! \n\n[half]\w8\w1\s[23]*Mike, insert [Passionate applause sounds] \n\n[half]\w8\w8\w8\w8\w8\s[13]*Now, \w6\s[17]my \f[bold,true]\f[color,255,255,2]STAR\w4\f[color,default]\f[bold,false] contestant, \w6\s[11]give me your \f[bold,true]\f[color,254,0,0]N\f[color,0,199,66]A\f[color,255,255,2]M\f[color,0,146,246]E\f[color,default]\f[bold,false]!\w5\s[24]\![open,inputbox,OnNameTeach,-1]"
	//"\0\s[0]\f[strike,true]These words are struck out.\f[strike,default]\w8\1\s[10]\f[sub,true]These words are a subscript.\f[sub,false] \f[sup,true]These words are a superscript.\f[sup,false] \f[underline,true]These words are underlined.\f[underline,default] \f[bold,true]These words are bold.\f[bold,false] \f[italic,true]These words are italic.\f[italic,false] \f[color,186,146,112]These words are a color.\f[color,default] This tag would return to default.\f[default]\e"

}

Select.closeact
{
	"\![leave,passivemode]\0\s[29]*(You leave the TV off.)"
}

//&&&&&&&
//*********************************
//NAME/PRONOUNS START
//*********************************
//&&&&&&&

//This section is only for people who have their ghost ask the user directly for their name/pronouns up above. If you aren't doing that, you can ignore this.


//Below are the choices that were defined at the end of the OnFirstBoot dialogue up there. These define the values your ghost will be using for pronouns according to what the user selected. On the whole, you should not need to touch these.

//*********************Advanced User Info*******************************
//Notice that after the values are set, there's a -- and then it loads up the next function in the sequence. You can use this basic method to set many values at once, then go to the same function afterwords.

//To define a value, you use a single = mark. If it's a word, you need to put it in quotation marks, but if it's a number, you do not. See the walkthrough page on coding for details.

//Notice how each choice is formatted as Select.choice. This is what I was talking about above with the difference between OnFunction and Function. These choices do not start with On, so they must begin with Select. instead. If you're setting up some quick choices for a menu you're only going to do once, then don't be afraid to use select. instead of having everything start with On.
//***********************************************************************

Select.choicefirsthehim
{
	presuffix = "masculine"
	himher = "him"
	heshe = "he"
	hisher = "his"
	hesshes = "he's"
	--
	NameInput
}

Select.choicefirstsheher
{
	presuffix = "feminine"
	himher = "her"
	heshe = "she"
	hisher = "her"
	hesshes = "she's"
	--
	NameInput
}

Select.choicefirsttheythem
{
	himher = "them"
	heshe = "they"
	hisher = "theirs"
	hesshes = "they're"
	--
	NameInput
}


//--NameInput

//NameInput is the next step in our introduction sequence. Now that the ghost has the pronouns set properly, they can ask the user for their name. It's done in this order so they'll know what prefixes will be appropriate for their name, like Mr. to he/him for example.

//*********************Advanced User Info*******************************
//Note this functions' name. This isn't a natural function included in the ghost, it's a piece of dialogue created by the original base coder to finish this sequence (cindysuke). I point this out to show you that you can do this too! You can create any number of functions just like this called whatever you want to do and say whatever you want! There are many things you can do with your Ghost if you're creative. Don't feel limited by what's in these files or the listed Shiori functions!
//Just make sure you test them and they work, alright? I wrote more about coding and functions in the coding page for the walkthrough.
//***********************************************************************

NameInput
{
	
	"\1\s[10]Now that the pronouns are set, we will ask for the user's name.\w8\0\s[0]What is your name, user? \![open,inputbox,OnNameTeach,-1]\e"
	
	//At the end of this dialogue there's a tag saying "\![open,inputbox,OnNameTeach,-1]". It basically leads to the naming function defined in nameteach.dic, so don't touch it. Make sure it's there though! Otherwise your user won't have a way to put in their name. :o
	
	//*********************Advanced User Info*******************************
	//What this tag basically means is that you're calling a function at the end of the dialogue with the \! tag, you are telling it to open, you're telling it to open an inputbox, and you're telling that inputbox to link to a function called OnNameTeach, which is in the nameteach.dic file. Remember what I said about On functions? I talked a bit about this in the SakuraScripting walkthrough page and the coding page.
	//The -1 at the end determines how long the box will be open until it times out. -1 means it shouldn't time out at all, I think.
	//***********************************************************************
}

//&&&&&&&
//*********************************
//NAME/PRONOUNS END
//*********************************
//&&&&&&&


//--timeslot

//This is another unique function to tell what time of day it is. This is used for specialized dialogue related to the day. If you're uninterested, just ignore it. Either way, don't touch it. If you are going to use it though, make a note of the names used for each chunk of time, like earlymorning or lunch. Those are the names you'll be using later.

timeslot
{
	if hour >= 5 && hour <= 8
	{	"earlymorning"	}
	elseif hour >= 9 && hour <= 11
	{	"morning"	}
	elseif hour >= 12 && hour <= 14
	{	"lunch"	}
	elseif hour >= 15 && hour <= 17
	{	"afternoon"	}
	elseif hour >= 18 && hour <= 20
	{	"evening"	}
	elseif hour >= 21 && hour <= 24
	{ "latenight"	}
	else
	{ "midnight" }
}

//*********************Advanced User Info*******************************
//Do you see how this function is determining what time of day it is? It's using larger than/smaller than operators to isolate a range of time to define. For example, "hour >= 21 && hour <= 24" defines an hour that's greater than/equal to 21 AND less than/equal to 24. You can use this basic method to define other things too, such as the seasons. Keep this in mind! You never know when it might come in handy. I talk about operators more in the coding walkthrough page.
//***********************************************************************


//--dayslot

//Like the above, but to find out what day it is. You can primarily use this for specialized dialogue on certain days, like the user's birthday. Either way, don't touch it.

dayslot
{
	"%(month)month %(day)day"
}


//-----------------------Normal Booting----------------------------

//From this point on, the dialogue will be for any normal boot of your ghost. You can specialize this for certain days or times if you like, or if you're uninterested, leave it very simple.


//--OnBoot

//As you can probably guess, OnBoot runs when you boot your ghost.

//*********************Advanced User Info*******************************
//If you're defining new values that depend on what you were doing with your ghost (like say, if you've hit them, if they're in a certain mode of some kind) and are generally temporary, remember to put them in OnBoot and set them back to zero or off. For example, I have a counter in the Hunter Smoker ghost that keeps track of if you've hit one of them so that when you go into their menus, it will know to give you the option to apologize or not. So I made sure to add a hunterpunchcount = 0 tag at the beginning of OnBoot, that way when you boot them up, they start fresh and don't display the option if you haven't done anything wrong yet. It's unlikely this'll come up very much if you're not interested in expanding your ghost, but I'm making a note of it here anyway for enterprising developers, huge success.

//You can also stick any values you want to reset on boot into their own function, like "BootReset", then run BootReset instead during boot so it's a bit less unwieldy. It's up to you though!
//***********************************************************************

OnBoot
 {
	lastTalk = "" //These values you may recognize from OnFirstBoot up there. Just pay them no mind.
	passhour = 0
	passmin = 0
	passsec = 0
	
	tvwatch = 0
	tvtogether = 0
	watchingvideos = 0
	watchingmovies = 0
	watchingmusic = 0
	watchingart = 0
	watchingwriting = 0
	watchinghomework = 0
	watchingstuff = 0
	watchinggaems = 0
	watchingch1 = 0
	watchingch2 = 0
	watchingch3 = 0
	
 	if tvtogether == 1
	{"\0\s[26]\1\s[-1]"}
	elseif tvwatch == 1
	{
		if watchingch1 == 1
		{
			"\0\s[30]\1\s[-1]"
		}
		elseif watchingch2 == 1
		{
			"\0\s[31]\1\s[-1]"
		}
		elseif watchingch3 == 1
		{
			"\0\s[32]\1\s[-1]"
		}
		else
		{
			"\0\s[30]\1\s[-1]"
		}
	}
	elseif notatv == 0
	{"\0\s[29]\1\s[-1]"}
	else
	{"\0\%(idletenna)\1\s[-1]"} //This sets them up in their neutral pose for now.
	
	//If you don't want to deal with individual day messages when you boot them, you can delete everything down to the end bracket for OnBoot (use Notepad++'s bracket tracking abilities to find where it is!) and instead add "%(normalboottalk)" to the end of the snip of dialogue up there that sets them up in their neutral poses. I'm pretty sure that should shortcut it properly. Simplified, it'd look like...
	//OnBoot
	//{
	//lastTalk = ""
	//passhour = 0
	//passmin = 0
	//passsec = 0 
	//"\0\s[0]\1\s[10]%(normalboottalk)"
	//}
	//If you want to check what day it is first though, read on ahead!
	--
	
	if dayslot == userbirthday //Now we're getting into the if statements. These check what the date is and, if it's a certain value, displays special dialogue. Here, the if statement is looking at the dayslot value (which we just defined) and evaluating it using the == operator to see if it equals another value, in this case the value "userbirthday". Basically this is checking to see if it's the user's birthday.
	
	//*********************Advanced User Info*******************************
	//If you're checking a value in an if statement, remember! 
	//= will define a value, so if you put blah = 90, it will change blah to 90.
	//== will check the value in an if statement, so if you put blah == 90, it will check if blah equals 90.
	//This tripped me up at first, so keep it in mind!
	//***********************************************************************
	
	{
				"\0\s[0]It's %(bornmonthprint) %(borndayprint).\w8\1\s[10]Happy birthday, %(username).\e" 
				
				//Notice in this dialogue that there are two new envelopes, %(bornmonthprint) and %(borndayprint). These two things basically display the user's birthday - bornmonthprint is the month and borndayprint is the day. These were defined when the user put in their birthday in the menu.dic file. See word.dic for more info on envelopes.
				//If the user didn't or hasn't put in their birthday yet, this dialogue will basically never get called. Which makes sense.
	}
	
	//elseif dayslot == "6month 6day" //Like above, this if statement is checking the date. It's looking for the sixth month and the sixth day. You can change these to any day or month you want.
	
	//*********************Advanced User Info*******************************
	//elseif statements always go after an if statement, and essentially are just what they sound like... if this thing happens, do this; else, if this thing happens, do this. elseifs are good if you have multiple things you want to check for in one function, like multiple days of the year as we're doing right now. elseifs go in descending order, so it'll always check if one is true, then if two is true, then if three is true, and so on.
	//***********************************************************************
	
	//{
				//"\0\s[0]Today is June 6th.\e"
	//}
	//elseif dayslot == "7month 4day"
	//{
				//"\1\s[10]It's the fourth of July.\e"
				
				//You can see how these basically work. You can add in new elseif statements along these same lines with your own dayslots if you want to have them say things for all sorts of days. You can also change these existing ones I put in as examples to other dates, like your character's birthdays, perhaps. This is up to you! If you don't care about this, you can delete all the elseifs and just leave the one for the user's birthday.
	//}
	else
	{
		"%(normalboottalk)" //If none of the days above match the current date, the ghost instead will go down to the next function, normalboottalk.
	}
}


//--normalboottalk

//This is another unique bit of coding from cindysuke's ghost. OnBoot above checks for the day when you open them, but normalboottalk can vary their dialogue in a few different ways depending on the time and weekday. I explain how to do that for advanced users below. If you're not interested, you can just fill out normalboottalk here with as much or as little dialogue as you want.

normalboottalk
{
	if notatv == 0
		{
			"\0\s[29]*(It's a TV.)\e"
			"\0\s[29]*(The TV is still there.)\e"
			"\0\s[29]*(TV awaits.)\e"
		}
	else
	{
		if weekday == 6 && hour >= 19 //This checks if the weekday equals six, meaning saturday AND (using the && operator) if the hour is past 19. You can change these numbers or values to anything you like! As such you can check any combination of date and day and time for potential boot dialogue. You can also add more elseif checks for other days if you want.
		{
			"\0\s[13]\i[1]*It's our Saturday night show!! \w8\w1\s[17]\i[1]Special guest\w2 - \s[11]\i[2]%(username)!!\e"
		}
		elseif RAND(100) < 75 //What this does is choose a random number from 1-100, and then checks if that number is less than 40. If it's less than forty, then these dialogue pieces will occur. Remember, you can have multiple lines of dialogue within one set of brackets like this! You just need to make sure they're all enclosed in their own set of quotation marks.
		{
			"\0\s[11]*Don't touch that dial, \w2folks, \w2\s[0]we're on!!\e"
	
			"\0\s[0]*MIKE, \w2hit the lights!\e"
	
			"\0\s[0]*Did you miss me?? \w8\w1\s[4]I know you have!\e"
	
			"\0\s[0]*A\w2A\w2A\w2A\w2ND \w2\s[6]we're on!\e"
	
			"\0\s[23]*You're favorite TV host is back!!\e"
	
			"\0\s[0]*FUN-O-METER just spiked up!!\e"
	
			"\0\s[11]*Let the show begin!\e"
	
			"\0\s[0]\i[1]*Welcome back,\w2 ladies and germs!!\e"
	
			"\0\s[6]*Welcome back,\w2 dear viewers!!\e"
	
			"\0\s[8]*Say it with me\w3\s[11] - it's \w3T\w3V \w3TIME!!!\e"
	
			"\0\s[11]*WE'RE LIVE!\e"
	
			"\0\s[8]\i[1]*%(username), \w2\s[17]it's your time to shine!\e"
		}
		else
		{
		// //The following if statements check the time of the day as defined above in the GetTimeSlot function. Do you remember the names that it defined? Now we're going to use them!
		
			if timeslot == "earlymorning" //The following dialogue will be called if they are booted during the time specified in GetTimeSlot (in this case, the hour being more than/equal to 5 but less than/equal to 8). Remember, you can add as many lines of dialogue here as you want, or take away as many as you want! Replace the dialogue here with what you see fit.
			{
				"\0\s[6]*Rise and shine!\e"
		
				"\0\s[0]*Nothing wakes you up more than some early TV!\e"
		
				"\0\s[17]*Here to keep you awake, \w2one and only, \w2\s[7]Ant Tenna!\e"
			}
			elseif timeslot == "morning"
			{
				"\0\s[0]*Mike, roll out our morning programing!\e"
		
				"\0\s[8]*GOOD MORNING, \w2FOLKS!! \w8\w1\s[2]MAKE YOUR VOLUME LOUDER FOR THE BEST MORNING EXPERIENCE!!!!!\e"
			}
			elseif timeslot == "lunch"
			{
				"\0\s[11]*Tune in for your favorite show!!\e"
		
				"\0\s[0]*Ready for a day filled with TV delight?!\e"
			}
			elseif timeslot == "afternoon"
			{
				"\0\s[11]*What time is it, \w2folks??\n\n[half]\w8\w4*(You say it's afternoon.)\n\n[half]\w8\w4\0\s[3]*W\w2R\w2O\w2O\w2O\w2N\w2G!!! \w8\w1\s[0]\i[1]It's \w2AF\f[bold,true]\w3T\w3V\w3\f[bold,false]ERNOON!!!\s[23]\e"
			}
			elseif timeslot == "evening"
			{
				"\0\s[0]*Time for our lovely evening programing!!\e"
			}
			elseif timeslot == "latenight"
			{
				"\0\s[8]\i[1]*Are you \w2READY for \w3\i[1]LATE \w3\i[1]NIGHT \w3\i[1]TV??!\s[8]\e"
		
				"\0\s[0]*MIKE, \w[2]roll out our after-work specials!!\e"
		
				"\0\s[6]*Welcome back to the best activity in the world\w2\s[23] - ac\f[bold,true]TV\f[bold,false]ity!\e"
			}
			else //the last timeslot we haven't done is midnight, which is what's under here.
			{
				"\0\s[0]*It's time for \w2ADULT\w2-ORIENTED \w2programing!!\e"
		
				"\0\s[8]\i[1]*Can't sleep?? \w8\w1\s[0]TV CAN HELP!\e"
		
				"\0\s[0]*Mike, \w2close your eyes, \w2\s[19]it's hours of our most scandalous programing!!!\e"
			}
		}
	}
}
	
	//Note! If you write any general boot dialogue, you'll want to put it in the "elseif RAND(100) < 40" section, since you can't have dialogue floating around outside of an if/else. Or in another if section you make, I don't know. It's up to you!
		
	//**********************************************************************		
	
//}


//--OnClose

//OnClose runs when you close your ghost. Like OnBoot, this can be customized for times and days if you like, as you saw above. I'll leave in the simplified version, and add in the more complicated ones in a comment box for ambitious or experienced developers.

//Do note, close dialogue must end with a \- instead of \e. \- will close the program.

//Like above with OnBoot, just replace all the following pieces of dialogue with your own. Note though that each bit here ends with \w8\w8\- instead of \e. The \w8 there is so there's a little pause before the ghost closes so the user can read the dialogue.

OnClose
 {
	if passmin >= 5 || passhour > 0	//This checks to see if you've had them open for at least five minutes.
	{
		if notatv == 0
		{
			"*(...)\w8\w8"
			"*(You walk away.)\w8\w8"
			"*(You leave it be.)\w8\w8"
		}
		else
		{
			if RAND(100) < 75 //see above about the random number generator
			{
				"\0\s[0]\i[1]*That's it for now, \w2folks. \w8\w2\s[11]\i[1]See you next time!\w8\w8"
				"\0\s[13]\i[1]*Until the next episode!!\w8\w8"
				"\0\s[23]*We'll be back after this prolonged commercial break!\w8\w8"
				"\0\s[0]*That's all, \w2folks!\w8\w8"
				"\0\s[6]*Thank you for watching!!\w8\w8"
				"\0\s[11]\i[1]*Be sure to check our giftshop on your way out!!!\w8\w8"
				"\0\s[6]*Thanks for watching! \w8\w6\s[19]Careful with that dial!\w8\w8"
				"\0\s[6]*Thanks for watching!! \w8\w4\s[18]Remember to tune in later!\w8\w8"
				"\0\s[0]*Mike, \w2roll the credits!!\w8\w8"
				"\0\s[11]\i[1]*Tune in next time for more tv-tastic entertainment!\w8\w8"
			}
			else
			{
				if timeslot == "earlymorning"
				{
					"\0\s[0]*That's all for our morning programing. \w8\w1\s[8]\i[1]See ya next time!\w8\w8"
				}
				elseif timeslot == "morning"
 				{
 					"\0\s[0]*That's all for our morning programing. \w8\w1\s[8]\i[1]See ya next time!\w8\w8"
 				}
				elseif timeslot == "lunch"
 				{
 					"\0\s[11]\i[1]*Remember to tune in later!\w8\w8"
 				}
				elseif timeslot == "afternoon"
 				{
 					"\0\s[14]*That's it for now! \w8\w5\s[7]I'll be there in the evening with your favourite shows!\w8\w8"
 				}
				elseif timeslot == "evening"
 				{
 						if weekday == 6 //here, a nested if statement is checking that if it's evening, is it also saturday? You can do this to check more specific times on other days as well. You can change this to some other day if you want, or just delete this little if/else section entirely and write your own evening related close dialogue.
 						{
 							"\0\s[0]\i[1]*And just like that \s[13]\i[1]our Saturday night show is coming to an end. \w8\w1\s[11]\i[1]Thank you for watching, \w2\s[13]\i[1]see you next \w2[tomorrow]!\w8\w8"
 						}
 						else //if it's not saturday, then it'll do this dialogue instead.
 						{
 							"\0\s[0]\i[1]*You can watch TV just a little bit longer! \w8\w2\i[1]No? \w8\w2\s[14]Oh well, \w2\s[17]until next time!\w8\w8"
 						}
 				}
			elseif timeslot == "latenight"
			 	{
 						if weekday == 6 //This is the same check as above to see if it's Saturday. Note that this doesn't have an else statement! Sometimes you can get away with that, but make sure you test thoroughly.
						// //Of course, you can also cut this check entirely if you want.
 						{
 							"\0\s[0]\i[1]*And just like that \s[13]\i[1]our Saturday night show is coming to an end. \w8\w1\s[11]\i[1]Thank you for watching, \w2\s[13]\i[1]see you next \w2[tomorrow]!\w8\w8"
 						}
						
 						"\0\s[0]*Up next, our most adult,\w2 scandalous programing! \w8\w1\s[17]Say goodnight to all children going to bed!\s[23]\w8\w8"
 				}
			else //like above, this is the midnight time slot since it's the last one left.
 				{
 						if weekday == 0 //checking if it's the middle of the night on Sunday
 						{
 							"\0\s[11]\i[1]*Get enough sleep before your \i[1][current occupation] tomorrow! \w8\w1\s[28]Night-night!!\w8\w8"
 						}
						"\0\s[11]\i[1]*Thanks for watching, \w2\i[1]and don't forget \w3\s[13]\i[1]- TV is your best friend. \w8\w2\s[19]Good night, \w2buddy!!\w8\w8"
				}
			}
		}
				
 	}	
 	else //This dialogue is for if they haven't been open for at least five minutes.
 	{
		if notatv == 0
		{
			"*(...)\w8\w8"
			"*(You walk away.)\w8\w8"
			"*(You leave it be.)\w8\w8"
		}
		else
		{
			"\0\s[8]*You- \w4\i[1]ah, \w7\s[9]\i[2]turning me off already? \w8\w3It's fine. \w8\w3I'll- \w3\s[27]\i[1]I'll be there \i[7]when you come back.\w8\w8"
		}
 	}
 	--
	"\-\e" //this bit of code actually closes and ends the ghost. Because \e is here, you don't have to end each line above with it. Again, this will come up very rarely, so OnClose is an unusual case.
 }
//**********************************************************************




 //-------------------------State Changing--------------------
 //From here on, most of the dialogue will have to do with changing shells, ghosts, or states in some way. You only need to fill in the ones you think you'll see. The template default dialogue will take care of the rest.
 
 
 //--OnWindowStateMinimize

//This will run when you minimize them. Replace with what you like.

 OnWindowStateMinimize
{
	"*(Tenna became smaller. \w8\w8He didn't notice.)\e"
	"*(The budget got cut again.)\e"
	"*(Tenna became more Ant-sized.)\e"
	"*(Small-screen TV.)\e"
}


//--OnWindowStateRestore

//This will run when you minimize them and then bring them back up. Replace with what you like.

OnWindowStateRestore
{
	"*(He's growing.)\e"
	"*(Somehow he has changed sizes again.)\e"
	"*(Tenna grows taller.)\e"
}


//--OnGhostChanging

//This runs whenever you change or reload the ghost. You can change ghosts by going into the right click menu and going to Change Ghost, but this dialogue will also be called if you reload them using Utilities->Reload Ghost or the Developer's Console->Reload->Ghost. Protip: If you are going to make a ghost, you will be reloading it A LOT.
//Note: If you reload your ghost using the developer console instead of Utilities->Reload Ghost, it won't do this dialogue, so don't freak out if it doesn't show up.
 
OnGhostChanging
 {
	if reference0 == "Tenna" //Replace this with the name of your Sakura character as you put in install.txt or descript.txt. I set this up to use the full ghost's name with Hunter and Smoker but I forget exactly how I did it and I'm having trouble getting it to work again. I think I just didn't define the Sakura or Kero names in either descript.txt or install.txt. You can experiment with it yourself. Otherwise, leave it as your Sakura character's name.
	{
		"\0\s[11]*We'll be back after a quick ad-break!\w8\w8\e"
		//Replace this dialogue with whatever you like.
	}
 	else //If you're switching to another Ghost.
	{
		"\0\s[13]*Changing the channel? \w8\w1\s[17]Just remember to return!\w8\w8\e"
		
		//Replace this dialogue with whatever you like. Notice the use of the %(reference0) envelope here? In OnGhostChanging, %(reference0) stores the name of the ghost being swapped to, so if you want to display what you're switching to, you can use %(reference0) as in this example. You don't have to use %(reference0) if you don't want to though.
	}
}


//--OnGhostChanged

//A sister to the above, this runs after the ghost has either reloaded itself, or when you switch from another ghost to this ghost.

OnGhostChanged
{
	"\0\s[0]\1\s[-1]" //this sets up their default poses
	--
	if reference0 == "Tenna" //As above, this should be the name of your ghost as in install.txt or descript.txt.
	{
		"\0\s[0]*A\w2A\w2A\w2ND \w2\s[11]\i[1]we're back! \w8\w1\s[7]MIKE, \w2get back in the chair, \w2we're going!\e"
	}
	else //If you're switching to them from another ghost...
	{
		"\0\s[11]\i[1]*A\w2A\w2A\w2ND \w2that was \w2%(reference0)!! \w8\w1\0\s[0]And now we welcome back our \w2STAR \w2contestant,\w3\s[8] %(user)!!\e"

		//Again, %(reference0) in this function is the name of the ghost in question. As above, replace these two lines of dialogue what what'd be appropriate for your ghost.
	}
}


//--OnShellChanging

//This will run when you change your ghost's shell. If you don't have any other shells for your ghost, you can safely ignore this but don't delete it, you might as well keep it just in case. I probably won't add a different shell to this template because shells are a lot of work ugh, but for the sake of argument, let's pretend I did.

OnShellChanging
 {
	if reference0 == "Hypothetical Shell that doesn't actually exist" //reference0 in OnShellChanging is the name of the shell you're swapping to. It should be defined in the descript.txt file in your shell folder. If you do have alternate shells, put in the right name here.
	{
	"\1\s[10]This dialogue is specifically for changing to this particular shell.\w8\0\w8\s[9]It totally exists.\w8\e"
	//Then rewrite this line as appropriate.
	}
	else //if you don't have any specific dialogue for a specific shell
	{
	"\0\s[0]This dialogue is for changing shells.\w8\1\s[10]Sure is.\w8\e"
	
	"\1\s[10]This is another bit of dialogue for changing shells.\w8\0\s[8]I wonder how many people will actually have multiple shells?\e"
	
	//Rewrite these two lines as you need.
	}
 }
 
 
 //--OnShellChanged
 
 //The sister to the above, this is the dialogue after you've changed the shell.
 
OnShellChanged
 {
 	if reference0 == "GT Default Shell" //Again, this is the name of your shell as you put in the descript.txt file for that shell.
 	{
 		nowshell = "master" //This is the folder name for your shell. Not the same as the above! 
		
 		"\0\s[0]This dialogue is for switching to our default shell.\w8\1\s[18]No really, will anyone actually put in the work to use these functions?\w8\0\s[9]\n\n[half]Shh.\e"
		//Replace dialogue as required.
 	}
 	elseif reference0 == "Hypothetical Shell that doesn't actually exist" //You can use as many elseifs for as many shells as you've got.
 	{
 		nowshell = "totallyrealshell"
		
 		"\0\s[0]This dialogue is for switching to that hypothetical shell.\e"
		
 		"\0\s[0]This is another bit of dialogue for switching to this hypothetical shell.\w8\1\s[18]Man if you actually use this, you should tell Zar, it'll blow her mind.\w8\0\n\n[half]\s[9]Shut up, we're not supposed to be in-character here.\e"
		//Replace these bits with whatever you have in mind.
 	}
 	elseif reference0 == "Another totally real shell wow"
 	{
 		nowshell = "thiswouldbesomuchwork"
		
 		"\1\s[10]This dialogue is after we've switched to another totally real shell.\e"
		//Replace this as well.
 	}
 	else //For any shell without a specific name, or if you don't want to bother with individual responses to a shell.
 	{
	"\0\s[0]This dialogue is after we've changed our shell to %(reference[0]).\w8\1\s[18]How many shells you got?\e"
	
	//Note the %(reference[0]) here! This time that should store the name of whatever shell you're switching to. Replace this bit of dialogue as you need.
	}
 }


 //--OnDressupChanged
 
 //This runs whenever you fiddle with their clothing via the dress-up option, if you've set any for your ghost. Make sure to read the clothing page on the walkthrough for details on how clothes work! This template won't have any because Girl and Triangle move around too much for it, but if your ghost is mostly stationary, clothes are an option. In that case, these functions are for you. For now, I'll fill this in with some hypothetical items. Replace the dialogue below with whatever you need.

OnDressupChanged
{
if reference0 == 0 //in OnDressupChanged, reference0 refers to the character, therefore this is evaluating which character in question is getting dressed up. 0 is the main character, as you know from the walkthrough by now.
	{
	if reference1 == "Clothing for Girl" //This is the name of the clothing item in the descript.txt file, I'm pretty sure.
		{
			if reference2 == 1 //This checks if you're putting it on.
			{
			"\0\s[0]You put my clothing item on me.\w8\1\s[19]lol like zar would ever bother with clothes for a ghost.\w8\0\s[9]\n\n[half]Shut up dude you're going to get us in trouble.\e"
			}
			else // This checks if you're taking it off.
			{
			"\0\s[0]You took the clothing item off.\e"
			}
		}		
	}
else //if reference0 isn't the main character, then it has to be the side character.
	{
	if reference1 == "some kind of clothing for triangle??" //The name of the item of clothing in the descript.txt file in your shell folder.
		{
			if reference2 == 1 //If you put it on
			{
			"\1\s[10]I'm wearing some kind of clothing.\w8\0\s[8]Maybe a hat?\e"
			}
			else //When you take it off.
			{
			"\1\s[10]You took off some kind of clothing.\e"
			}
		}
	elseif reference1 == "i'm gonna say a propeller beanie" //As you've seen above, you can use elseifs to expand the list if you have more than one item.
		{
			if reference2 == 1 //if you're putting it on
			{
			"\1\s[10]You put a hat on me.\w8\0\s[6]lol.\w8\1\n\n[half]\s[11]Shaddap.\e"
			}
			else //when you take it off
			{
			"\1\s[10]You took off the hat.\e"
			}
		}
	}
}